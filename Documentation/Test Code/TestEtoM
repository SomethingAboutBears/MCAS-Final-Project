#include <Adafruit_Arcada.h>
#include <Adafruit_SPIFlash.h> // For increasing flash space of board?
#include <Adafruit_Sensor.h> // For basic sensors
//#include <Adafruit_LSM6DS33.h> // Accelerometer and Gyroscope
//#include <Adafruit_LIS3MDL.h> // Magnetomenter
//#include <Adafruit_SHT31.h> // Temperature and Humidity Sensor
//#include <Adafruit_APDS9960.h> // Proximity, Light, RGB, and Gesture Sensor
//#include <Adafruit_BMP280.h> // Pressure and altitude sensors
#include <PDM.h>
#include <Adafruit_TinyUSB.h>
#include <SoftwareSerial.h>

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<ctype.h>

#define WHITE_LED 43

Adafruit_Arcada arcada;
// Adafruit_LSM6DS33 lsm6ds33;
// Adafruit_LIS3MDL lis3mdl;
// Adafruit_SHT31 sht30;
// Adafruit_APDS9960 apds9960;
// Adafruit_BMP280 bmp280;
extern PDMClass PDM;
extern Adafruit_FlashTransport_QSPI flashTransport;
extern Adafruit_SPIFlash Arcada_QSPI_Flash;

uint32_t buttons, last_buttons;
uint8_t j = 0;  // neopixel counter for rainbow

// Added:


const byte latinTextlength = 280;
char latinText[latinTextlength];   // an array to store the received data

boolean newinput = false;


//char latinText[280]; // For taking in a input from the serial
uint8_t inputs = 0;
// String input;
//const int latinTextlength = 280;
char* EtoM(char c,char* morse);


uint8_t x = 1; // Character counter for typing on the screen
uint8_t i = 0;
uint8_t k = 0;

int right;
int left;
char* MtoE(char* segment,char* output);
char morseText[3920];

uint32_t l_pressStartTime,r_pressStartTime = 0;
uint32_t l_pressStopTime,r_pressStopTime = 0;
uint32_t l_holdTime,r_holdTime = 0;

// Check the timer callback, this function is called every millisecond!
volatile uint16_t milliseconds = 0;
void timercallback() {
  analogWrite(LED_BUILTIN, milliseconds);  // pulse the LED
  if (milliseconds == 0) {
    milliseconds = 255;
  } else {
    milliseconds--;
  }
}

void setup() {
  Serial.begin(115200);
/*
  // enable NFC pins  
  if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    Serial.println("Fix NFC pins");
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy);
    NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy);
    Serial.println("Done");
    NVIC_SystemReset();
  }
  */
  pinMode(WHITE_LED, OUTPUT);
  digitalWrite(WHITE_LED, LOW);
/*
  Serial.println("Hello! Arcada Clue test");
  if (!arcada.arcadaBegin()) {
    Serial.print("Failed to begin");
    while (1);
  }
*/
  arcada.displayBegin();
  Serial.println("Arcada display begin");

  for (int i=0; i<250; i+=10) {
    arcada.setBacklight(i);
    delay(1);
  }

  arcada.display->setCursor(0, 0);
  arcada.display->setTextWrap(true);
  arcada.display->setTextSize(2);
  
  /********** Check MIC */
  //PDM.onReceive(onPDMdata);
  //if (!PDM.begin(1, 16000)) {
  //  Serial.println("**Failed to start PDM!");
  //}
  

  buttons = last_buttons = 0;
  arcada.timerCallback(1000, timercallback);
  arcada.display->setTextWrap(false);

  Serial.println("Enter in your phrase one character at a time.");
  Serial.println("Enter '$' to finish entering characters.");
}


void loop() {
  arcada.display->setTextColor(ARCADA_WHITE, ARCADA_BLACK);
  arcada.display->setCursor(0, 50);
// Use Serial.read() to read one input character at a time. Ask for user input one character at a time
/*
  if(Serial.available()){
    for (int j = 0;j<latinTextlength;j++){
      latinText[j] = Serial.read();
    }
    Serial.println(latinText);
  }
  int k = 1;
    for (int x=0;x<i;x++){
      arcada.display->print(latinText[x]);
      if (x==(k*20)-1){
        arcada.display->println("     ");
        k++;
      }
    }
}
*/
    readinput();
    showNewinput();


/*
    latinText[latinTextlength-1] = 0;
    char morse[15000] = "";
    for (int i = 0; i < latinTextlength; i++) {
        EtoM(latinText[i],morse);
    }
    Serial.println(morse);
    //arcada.display->print(morse);
    */
}


void readinput() {
    static byte ndx = 0;
    char endMarker = '\n';
    char input;
    
    while (Serial.available() > 0 && newinput == false) {
        input = Serial.read();

        if (input != endMarker) {
            latinText[ndx] = input;
            ndx++;
            if (ndx >= latinTextlength) {
                ndx = latinTextlength - 1;
            }
        }
        else {
            latinText[ndx] = '\0'; // terminate the string
            ndx = 0;
            newinput = true;
        }
    }
}
void showNewinput() {
    if (newinput == true) {
        Serial.println(latinText);
        arcada.display->print(latinText);
        newinput = false;
    }
}
  /*
  while(inputs == 0){
    if(Serial.available()){
        
      inputs = 1;
      if (inputs ==1){
        char inputchar = Serial.read();
        // If the character is a $ - chosen because it is S for stop
        if (inputchar == 36){ 
          inputs = 0;
        }
        latinText[i] = inputchar;
        i++;
        Serial.println(inputchar);
      }
    }
  }
  
  int k = 1;
    for (int x=0;x<i;x++){
      arcada.display->print(latinText[x]);
      if (x==(k*20)-1){
        arcada.display->println("     ");
        k++;
      }
    }
*/
  /*
  int k = 1;
  for (int x=0;x<latinTextlength;x++){
    arcada.display->print(latinText[x]);
    if (x==(k*20)-1){
      arcada.display->println("     ");
      k++;
    }
  }
}
*/
  char* EtoM(char c,char* morse) {
      if (c == 'A' || c == 'a') {
          strcat(morse,".-   ");
      }
      else if (c == 'B' || c == 'b') {
          strcat(morse,"-...   ");
      }
      else if (c == 'C' || c == 'c') {
          strcat(morse,".. .   ");
      }
      else if (c == 'D' || c == 'd') {
          strcat(morse,"-..   ");
      }
      else if (c == 'E' || c == 'e') {
          strcat(morse,".   ");
      }
      else if (c == 'F' || c == 'f') {
          strcat(morse,".-.   ");
      }
      else if (c == 'G' || c == 'g') {
          strcat(morse,"--.   ");
      }
      else if (c == 'H' || c == 'h') {
          strcat(morse,"....   ");
      }
      else if (c == 'I' || c == 'i') {
          strcat(morse,"..   ");
      }
      else if (c == 'J' || c == 'j') {
          strcat(morse,"-.-.   ");
      }
      else if (c == 'K' || c == 'k') {
          strcat(morse,"-.-   ");
      }
      else if (c == 'L' || c == 'l') {
          strcat(morse,"⸺   ");
      }
      else if (c == 'M' || c == 'm') {
          strcat(morse,"--   ");
      }
      else if (c == 'N' || c == 'n') {
          strcat(morse,"-.   ");
      }
      else if (c == 'O' || c == 'o') {
          strcat(morse,". .   ");
      }
      else if (c == 'P' || c == 'p') {
          strcat(morse,".....   ");
      }
      else if (c == 'Q' || c == 'q') {
          strcat(morse,"..-.   ");
      }
      else if (c == 'R' || c == 'r') {
          strcat(morse,". ..   ");
      }
      else if (c == 'S' || c == 's') {
          strcat(morse,"...   ");
      }
      else if (c == 'T' || c == 't') {
          strcat(morse,"-   ");
      }
      else if (c == 'U' || c == 'u') {
          strcat(morse,"..-   ");
      }
      else if (c == 'V' || c == 'v') {
          strcat(morse,"...-   ");
      }
      else if (c == 'W' || c == 'w') {
          strcat(morse,".--   ");
      }
      else if (c == 'X' || c == 'x') {
          strcat(morse,".-..   ");
      }
      else if (c == 'Y' || c == 'y') {
          strcat(morse,".. ..   ");
      }
      else if (c == 'Z' || c == 'z') {
          strcat(morse,"... .   ");
      }
      else if (c == '0') {
          strcat(morse,"⸻   ");
      }
      else if (c == '1') {
          strcat(morse,".--.   ");
      }
      else if (c == '2') {
          strcat(morse,"..-..   ");
      }
      else if (c == '3') {
          strcat(morse,"...-.   ");
      }
      else if (c == '4') {
          strcat(morse,"....-   ");
      }
      else if (c == '5') {
          strcat(morse,"---   ");
      }
      else if (c == '6') {
          strcat(morse,"......   ");
      }
      else if (c == '7') {
          strcat(morse,"--..   ");
      }
      else if (c == '8') {
          strcat(morse,"-....   ");
      }
      else if (c == '9') {
          strcat(morse,"-..-   ");
      }
      else if (c == '.') {
          strcat(morse,"..--..   ");
      }
      else if (c == ',') {
          strcat(morse,".-.-   ");
      }
      else if (c == ':') {
          strcat(morse,"-.- . .   ");
      }
      else if (c == '?') {
          strcat(morse,"-..-.   ");
      }
      else if (c == '\'') {
          strcat(morse,"..-. .-..   ");
      }
      else if (c == '-') {
          strcat(morse,"... .-..   ");
      }
      else if (c == '/') {
          strcat(morse,"..- -   ");
      }
      else if (c == '(') {
          strcat(morse,"..... -.   ");
      }
      else if (c == ')') {
          strcat(morse,"..... .. ..   ");
      }
      else if (c == '"') {
          strcat(morse,"..-. -.   ");
      }
      else if (c == '&') {
          strcat(morse,". ...   ");
      }
      else if (c == '!') {
          strcat(morse,"---.   ");
      }
      else if (c == ';') {
          strcat(morse,"... ..   ");
      }
      else if (c= ' ') {
          strcat(morse,"/   ");
      }
      return morse;
      }
